##### TYPES #####
type Query {
	restaurants(
		whatToGoFor: [GoFor!]
		cuisines: [Cuisine!]
		prices: [String!]
		happyHourDays: [String!]
		rating: Rating
		skip: Int
		take: Int
		orderBy: RestaurantOrderByInput
	): Restaurants
	restaurant(id: ID!): Restaurant
	currentUser(id: ID!): User
}

type Mutation {
	create(
		name: String!
		image: String!
		url: String!
		rating: Rating!
		description: String!
		happyHourDays: [String!]!
		startTime: String!
		endTime: String!
		cuisine: [Cuisine!]!
		price: String!
		whatToGoFor: [GoFor!]!
		when: String!
		menu: String
		percentOffDrinks: Int
		percentOffFood: Int
		coordinates: CoordinatesInput!
		address: String!
		active: Boolean!
	): Restaurant!
	signup(
		role: Role
		email: String!
		password: String!
		name: String!
	): AuthPayload
	updateRestaurant(id: ID!, data: UpdateData): UpdatePayload
	login(email: String!, password: String!): AuthPayload
	deleteRestaurant(id: ID!): DeletePayload
	deleteUser(id: ID!): DeletePayload
	vote(restaurantID: ID!): Vote
}

type Restaurant {
	id: ID!
	createdAt: String!
	cuisine: [Cuisine!]!
	name: String!
	rating: Rating!
	warnings: Warning
	price: String!
	url: String!
	image: String!
	menu: String
	whatToGoFor: [GoFor!]!
	when: String!
	description: String!
	happyHourDays: [String!]!
	startTime: String!
	endTime: String!
	percentOffDrinks: Int
	percentOffFood: Int
	coordinates: Coordinates!
	votes: [Vote!]!
	address: String!
	active: Boolean
	createdBy: User
}

type Restaurants {
	results: [Restaurant!]
	count: Int!
}

type AuthPayload {
	token: String
	user: User
}

type DeletePayload {
	success: Boolean!
}

type UpdatePayload {
	success: Boolean!
	restaurant: Restaurant
}

type User {
	id: ID!
	name: String!
	email: String!
	role: Role
	restaurants: [Restaurant!]!
}

type Subscription {
	newRestaurant: Restaurant
	newVote: Vote
}

type Vote {
	id: ID!
	restaurant: Restaurant!
	user: User!
}

type Coordinates {
	lat: String!
	lng: String!
}

type Warning {
	WRONG_TIMES: Int
	NO_LONGER_ACTIVE: Int
}

##### INPUTS #####
input CoordinatesInput {
	lat: String!
	lng: String!
}

input WarningInput {
	WRONG_TIMES: Int
	NO_LONGER_ACTIVE: Int
}

input UpdateData {
	cuisine: [Cuisine!]
	name: String
	rating: Rating
	price: String
	url: String
	image: String
	menu: String
	whatToGoFor: [GoFor!]
	when: String
	description: String
	happyHourDays: [String!]
	startTime: String
	endTime: String
	percentOffDrinks: Int
	percentOffFood: Int
	coordinates: CoordinatesInput
	address: String
	warnings: WarningInput
	active: Boolean
}

input RestaurantOrderByInput {
	description: Sort
	name: Sort
	url: Sort
	createdAt: Sort
}

##### ENUMS #####
enum GoFor {
	DRINKS
	FOOD
}

enum WarningEnum {
	WRONG_TIMES
	NO_LONGER_ACTIVE
}

enum Sort {
	ASC
	DESC
}

enum Role {
	USER
	ADMIN
}

enum Rating {
	ONE
	TWO
	THREE
	FOUR
	FIVE
	SIX
	SEVEN
	EIGHT
	NINE
	TEN
	NA
}

enum Cuisine {
	JAPANESE
	AMERICAN
	CHINESE
	INDIAN
	MEXICAN
	ITALIAN
	STEAK_HOUSE
	ASIAN
	SOUTHERN
	SEAFOOD
}
