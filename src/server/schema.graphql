type Query {
  restaurants(
    filter: String
    skip: Int
    take: Int
    orderBy: RestaurantOrderByInput
  ): Restaurants!
  restaurant(id: ID!): Restaurant
  currentUser(id: ID!): User
}

type Mutation {
  create(
    name: String!
    image: String!
    url: String!
    description: String!
    happyHourDays: String!
    startTime: String!
    endTime: String!
    percentOffDrinks: Int
    percentOffFood: Int
    coordinates: CoordinatesInput!
    address: String!
  ): Restaurant!
  signup(role: Role, email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  deleteRestaurant(id: ID!): DeletePayload
  deleteUser(id: ID!): DeletePayload
  vote(restaurantID: ID!): Vote
}

type Restaurant {
  id: ID!
  createdAt: String!
  name: String!
  url: String!
  image: String!
  description: String!
  happyHourDays: String!
  startTime: String!
  endTime: String!
  percentOffDrinks: Int
  percentOffFood: Int
  coordinates: Coordinates!
  votes: [Vote!]!
  address: String!
  createdBy: User
}

type Restaurants {
  restaurants: [Restaurant!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type DeletePayload {
  success: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: Role
  restaurants: [Restaurant!]!
}

type Subscription {
  newRestaurant: Restaurant
  newVote: Vote
}

type Vote {
  id: ID!
  restaurant: Restaurant!
  user: User!
}

input CoordinatesInput {
  lat: String!
  lng: String!
}

type Coordinates {
  lat: String!
  lng: String!
}

input RestaurantOrderByInput {
  description: Sort
  name: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  ASC
  DESC
}

enum Role {
  USER
  ADMIN
}